[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    RESPOND MSG='bed temp variale: {BED_TEMP}'
    RESPOND MSG='extrude variale: {EXTRUDER_TEMP}'
	{% set YTOOL_MAX = printer.toolhead.axis_maximum.y %}
	{% set PRIME_LENGTH = 200 %}     # or maybe YTOOL_MAX/2 

    # Start bed heating
    M140 S{BED_TEMP}
    #PreHeat Nozzle to 150C
    M104 S150
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    #SET_GCODE_OFFSET Z=-0.01
    
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Home the printer after bed is warm for Z consistency. Not sure if true but I think it helps.
    G28
    
# CHOICE: Load bed mesh or fresh probe
    # Load Bed Mesh Profile
    BED_MESH_PROFILE LOAD=default
    # Probe new bed mesh level
    #BED_MESH_CALIBRATE

    # Move the nozzle near the bed
    #G1 Z5 F3000
    # Move the nozzle very close to the bed
    #G1 Z0.15 F300
    # Set and wait for nozzle to reach temperature
    RESPOND MSG='Set and wait for nozzle to reach temp: {EXTRUDER_TEMP}'
    M109 S{EXTRUDER_TEMP}
    # Cura's Prime Line
    G92 E0 ;Reset Extruder
    G1 X10.1 Y25 Z0.28 F5000.0 ;Move to start position
    G1 X5.1 Y{PRIME_LENGTH} Z0.28 F1500.0 E15 ;Draw the first line
    G1 X5.4 Y{PRIME_LENGTH} Z0.28 F5000.0 ;Move to side a little
    G1 X5.4 Y25 Z0.28 F1500.0 E20 ;Draw the second line
    G92 E0 ;Reset Extruder
    G1 Z2.0 F3000 ;Move Z Axis up


[gcode_macro END_PRINT]
gcode:
    {% set YTOOL_MAX = printer.toolhead.axis_maximum.y %}  
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    G1 X0 Y{YTOOL_MAX}
    # Disable steppers
    M84
    #CLEAR_ACTIVE_SPOOL

## Spoolman Filament Manager ##
[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}
## END Spoolman Filament Manager ##

# [gcode_macro CHECK_SPOOL]
#   #{% if SPOOL_ID %}
# gcode:
#     {action_call_remote_method(
#        "spoolman_spool_id"
#     )}

[gcode_macro G29]                    # If moving from marlin to klipper uncomment to mimic G29
gcode:
  BED_MESH_CALIBRATE

[gcode_macro M0]                    # If moving from marlin to klipper uncomment to mimic G29
gcode:
  PAUSE


[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-1 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[delayed_gcode bed_mesh_init]
initial_duration: .01
gcode:
  BED_MESH_PROFILE LOAD=default


[idle_timeout]
gcode:
  {% if printer.pause_resume.is_paused %}
    # Store previous temperature
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=prev_temp VALUE={printer.extruder.target}
    M117 Idle but paused, maintaining bed temp.
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
  {% else %}
    TURN_OFF_HEATERS
    M84
  {% endif %}
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
timeout: 600
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.


[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  RESPOND TYPE=error MSG='Print Paused !!'
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_prev_temp: 0
gcode:
  RESPOND TYPE=error MSG='Print Resuming !!'
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    # Check that a previous temp was stored:
    {% if prev_temp > 0 %}
      # Restore previous temp
      {action_respond_info("Heating extruder..")}
      M109 S{prev_temp}
    {% else %}
      # No previous temp was stored
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
  {% endif %}  
  # Reset the stored previous temp
  {% set prev_temp = 0 %}
  RESUME_BASE {get_params}


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
#rename_existing: CANCEL_PRINT_BASE
gcode:
  RESPOND TYPE=error MSG='Print has been canceled'
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  END_PRINT

[exclude_object]

[display_status]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}


[gcode_macro TEST_ECHO_VARS]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set Y_MAX = [stepper_y].position_max %} 
    {% set YTOOL_MAX = printer.toolhead.axis_maximum.y %}  
    {% set PRIME_LENGTH = YTOOL_MAX/2 %}
    RESPOND MSG='hello. this is a message'
    RESPOND MSG='y_max variable: {Y_MAX}, it should be 450.'
    RESPOND MSG='y_max variable: {YTOOL_MAX}, it should be 450.'
    RESPOND MSG='bed temp variable: {BED_TEMP}, it should be 60.'
    RESPOND MSG='extrude variable: {EXTRUDER_TEMP}, it should be 190.'
    RESPOND TYPE=error MSG='Error message'
    RESPOND TYPE=command MSG='Command message'
	RESPOND MSG='PRIME_LENGTH variable: {PRIME_LENGTH}, it should be around 117 on ender 3 and 200 on cr10max'
	
[respond]
#default_type: echo
#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
#default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".
#RESPOND TYPE=error MSG='Error message'

[gcode_arcs]
#resolution: 1.0
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.

###### LOAD_FILAMENT ######
# 
# # Edit the default() value for FAST
# to the amount of extrusion required to bring the filament to
# just before it starts coming out the hotend (bowden length)
# 
# # Edit the default() value for SLOW
# to the amount of extrusion required after it reaches the hotend (purge amount)
# 
[gcode_macro LOAD_FILAMENT]
gcode:
  {% set SLOW = params.SLOW|default(60)|float %} ; Purge amount
  {% set FAST = params.FAST|default(80)|float %} ; Load length
  ##################
  {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
  {% if printer.configfile.settings.extruder.min_extrude_temp is defined %}
      {% set min_temp = printer.configfile.settings.extruder.min_extrude_temp|int %}
  {% else %}
      {% set min_temp = 170 %}
  {% endif %}
  {% if params.TARGET is defined %} ; If current temp is below target
    {% set TARGET = params.TARGET|int %}
    {% if cur_temp|int < TARGET|int %}
      M117 Heating nozzle...
      M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
  {% endif %}
  {% if printer.extruder.can_extrude == False %} ; Verify extruder is hot enough
    RESPOND TYPE=error MSG="Below minimum temp. Heating extruder..."
    M109 S{min_temp|int} ; Heat up to min_extrude_temp
  {% endif %}
  M117  LOADING...
  G91 ; Relative positioning
  G1 E25.0 F1000 ; pre-load
  G1 E{FAST} F2500 ; load up to hotend
  G4 P900 ; wait a moment
  G1 E{SLOW} F250 ; purge to change filament
  G90 ; Absolute postitioning
  SET_IDLE_TIMEOUT TIMEOUT=900 ; Return idle timeout to normal


###### PURGE ######
# 
# Edit the default() value for LENGTH
# to the amount of filament you'd like to purge
# 
[gcode_macro PURGE]
gcode:
  {% set LENGTH = params.LENGTH|default(45)|float %} ; Purge length
  ##################
  {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% if printer.configfile.settings.extruder.min_extrude_temp is defined %}
        {% set min_temp = printer.configfile.settings.extruder.min_extrude_temp|int %}
    {% else %}
        {% set min_temp = 170 %}
    {% endif %}
  {% if params.TARGET is defined %} ; If current temp is below target
    {% set TARGET = params.TARGET|int %}
    {% if cur_temp|int < TARGET|int %}
      M117 Heating nozzle...
      M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
  {% endif %}
  {% if printer.extruder.can_extrude == False %} ; Verify extruder is hot enough
    RESPOND TYPE=error MSG="Below minimum temp. Heating extruder..."
    M109 S{min_temp|int} ; Heat up to min_extrude_temp
  {% endif %}
  M117 PURGING..
  G91 ; Relative positioning
  G1 E{LENGTH} F250 ; Purge 45mm of filament
  G90 ; Absolute postitioning

[gcode_macro rafi_macro_complete_bed_leveler]
gcode:
    # Heat Bed to typical printing temp of 60c. 
      #When bedmesh without heat as described in documentation, it seemed to produce inconistent results, but that might have been before i resolved probe issues.
    M190 S60
    # Use absolute coordinates
    G90
    # Home the printer after bed is warm for Z consistency. Not sure if true but I think it helps.
    G28
    # Probe reliability test if need. Tighten/loosen screw to potentially improve range/std_deviation accuracy.
    PROBE_ACCURACY 
    # Probe Calibrate if needed. 
    PROBE_CALIBRATE 
    # Run bed mesh probing
	  #not being started for some reason
    BED_MESH_CALIBRATE PROFILE="default"