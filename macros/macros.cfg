# Cura Machine Start G-code :
#Nozzle diameter = {machine_nozzle_size}
#Filament weight = {filament_weight}
#Filament type = {material_type}
#Filament name = {material_name}
#START_PRINT BED_TEMP={material_bed_temperature_layer_0} EXTRUDER_TEMP={material_print_temperature_layer_0} NOZDIA={machine_nozzle_size} LINE_WIDTH={line_width} SLICEFLOW={material_flow}

#[force_move]
#enable_force_move: true
[exclude_object]

[gcode_arcs]
resolution: 0.1

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    RESPOND MSG='bed temp variale: {BED_TEMP}'
    RESPOND MSG='extrude variale: {EXTRUDER_TEMP}'
    {% set YTOOL_MAX = printer.toolhead.axis_maximum.y %}
	{% set PRIME_LENGTH = 200 %}     # or maybe YTOOL_MAX/2 

    # Start bed heating
    M140 S{BED_TEMP}
    #PreHeat Nozzle to 150C
    M104 S150
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    #SET_GCODE_OFFSET Z=-0.01
    
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Home the printer after bed is warm for Z consistency. Not sure if true but I think it helps.
    G28
    #TODO check if bedmesh profile is loaded or not
# CHOICE: Load bed mesh or fresh probe
    # Load Bed Mesh Profile
    #BED_MESH_PROFILE LOAD=default
    # Probe new bed mesh level
    #BED_MESH_CALIBRATE

    # Move the nozzle near the bed
    #G1 Z5 F3000
    # Move the nozzle very close to the bed
    #G1 Z0.15 F300
    # Set and wait for nozzle to reach temperature
    RESPOND MSG='Set and wait for nozzle to reach temp: {EXTRUDER_TEMP}'
    M109 S{EXTRUDER_TEMP}
    # Cura's Prime Line
    G92 E0 ;Reset Extruder
    G1 X10.1 Y25 Z0.25 F5000.0 ;Move to start position
    G11
    G1 X5.1 Y{PRIME_LENGTH} Z0.24 F1500.0 E7 ;Draw the first line
    G1 X5.4 Y{PRIME_LENGTH} Z0.24 F5000.0 ;Move to side a little
    G1 X5.4 Y25 Z0.24 F1500.0 E10 ;Draw the second 
    G92 E0 ;Reset Extruder
    G1 Z2.0 F3000 ;Move Z Axis up
    G1 X2 Y20 Z0.3 F5000.0 ; Move over to prevent blob squish


[gcode_macro _DISPLAY_PRINT]
gcode:
    {% set YTOOL_MAX = printer.toolhead.axis_maximum.y %}  
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z30 F3000
    G90
    G1 X0 Y{YTOOL_MAX}
    # Disable steppers
    M84
    # Restore potentially changed values to default
    M220 S100 # Speed
    M221 S100 # Flow

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    G10 #FW retract
    M140 S0
    M104 S0
    M106 S0
    # Display Print ( move plate to front and printhead to left corner)
    _DISPLAY_PRINT
    #CLEAR_ACTIVE_SPOOL

[gcode_macro RESUME_FAILED_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    RESPOND MSG='bed temp variale: {BED_TEMP}'
    RESPOND MSG='extrude variale: {EXTRUDER_TEMP}'
        
    # Start bed heating
    M140 S{BED_TEMP}
    #PreHeat Nozzle to 200C
    M104 S200
    # Use absolute coordinates
    G90
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    RESPOND MSG='Set and wait for nozzle to reach temp: {EXTRUDER_TEMP}'
    M109 S{EXTRUDER_TEMP}
    G10
    #### MODIFY CUSTOM RECOVERY SAFE Z POSITION
    RESPOND MSG='Home X and Y'
    G28 X Y
    RESPOND MSG='Home Z'
    G28 Z
    # Load Bed Mesh Profile ## Bed mesh should be loaded by default
    #BED_MESH_PROFILE LOAD=default
    RESPOND MSG='Resume Failed Print Macro Complete. Now running gcode.'


## Spoolman Filament Manager ##
[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}
## END Spoolman Filament Manager ##

# [gcode_macro CHECK_SPOOL]
#   #{% if SPOOL_ID %}
# gcode:
#     {action_call_remote_method(
#        "spoolman_spool_id"
#     )}

[gcode_macro G29]                    # If moving from marlin to klipper uncomment to mimic G29
gcode:
  BED_MESH_CALIBRATE

[gcode_macro M0]                    # If moving from marlin to klipper uncomment to mimic G29
gcode:
  RESPOND TYPE=error MSG="M0 type pause detected!"
  PAUSE


[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-1 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[delayed_gcode bed_mesh_init]
initial_duration: .01
gcode:
  BED_MESH_PROFILE LOAD=default


[idle_timeout]
gcode:
  {% if printer.pause_resume.is_paused %}
    # Store previous temperature
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=prev_temp VALUE={printer.extruder.target}
    M117 Idle but paused, maintaining bed temp.
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
  {% else %}
    TURN_OFF_HEATERS
    M84
  {% endif %}
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
timeout: 600
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.


[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 5.0
gcode:
  RESPOND TYPE=error MSG='Print Paused !!'
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 30.0) %}
      {% set z_safe = 30.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F4200
    #G10 #FW retract
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_prev_temp: 0
gcode:
  RESPOND TYPE=error MSG='Print Resuming !!'
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
    #G11 #FW unretract
  {% else %}
    # Check that a previous temp was stored:
    {% if prev_temp > 0 %}
      # Restore previous temp
      {action_respond_info("Heating extruder..")}
      M109 S{prev_temp}
    {% else %}
      # No previous temp was stored
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
  {% endif %}  
  # Reset the stored previous temp
  {% set prev_temp = 0 %}
  RESUME_BASE {get_params}


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  RESPOND TYPE=error MSG='Print has been Canceled !!'
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set allow_park = client.park_at_cancel | default(false) | lower == 'true' %}
  {% set retract = client.cancel_retract | default(5.0) | abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x | default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y | default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x | length > 0 or park_y | length > 0 %}
  ##### end of definitions #####
  
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  G10 #FW retract
  CANCEL_PRINT_BASE
  _DISPLAY_PRINT

[exclude_object]

[display_status]



#### Taken from fluidd/mainsail.cfg because i dont want to include the whole file because i dont like their cancel_print macro


[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE | default(1) | int != 0 %}
  {% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0 | 1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
  {% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}

##### internal use #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos | default(false) | lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x | default(0.0) %}
  {% set custom_park_y  = client.custom_park_y | default(0.0) %}
  {% set park_dz        = client.custom_park_dz | default(2.0) | abs %}
  {% set sp_hop         = client.speed_hop | default(15) * 60 %}
  {% set sp_move        = client.speed_move | default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z | default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN | default(0) | float %}
  {% set z_park = [[(act.z + park_dz), z_min] | max, (max.z - origin.z)] | min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set use_fw_retract = (client.use_fw_retract | default(false) | lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}
  {% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed | float | abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='Extruder not hot enough'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}
  {% set speed = params.SPEED | default(client.speed_retract) | default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}

#### End of desired fluidd/mainsail macros



[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}


[gcode_macro TEST_ECHO_VARS]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set Y_MAX = [stepper_y].position_max %} 
    {% set YTOOL_MAX = printer.toolhead.axis_maximum.y %}  
    {% set PRIME_LENGTH = YTOOL_MAX/2 %}
    RESPOND MSG='hello. this is a message'
    RESPOND MSG='y_max variable: {Y_MAX}, it should be 450.'
    RESPOND MSG='y_max variable: {YTOOL_MAX}, it should be 450.'
    RESPOND MSG='bed temp variable: {BED_TEMP}, it should be 60.'
    RESPOND MSG='extrude variable: {EXTRUDER_TEMP}, it should be 190.'
    RESPOND TYPE=error MSG='Error message'
    RESPOND TYPE=command MSG='Command message'
	RESPOND MSG='PRIME_LENGTH variable: {PRIME_LENGTH}, it should be around 117 on ender 3 and 200 on cr10max'
	
[respond]
default_type: echo
#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".
#RESPOND TYPE=error MSG='Error message'

[gcode_macro M117]
rename_existing: M117.1
gcode:
  M117.1 {rawparams}
  {action_respond_info(rawparams)}

[gcode_arcs]
#resolution: 1.0
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.

###### FILAMENT CHANGE MAROS ######
[gcode_macro UN_LOAD_FILAMENT]
gcode:
  ##################
  {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
  {% if printer.configfile.settings.extruder.min_extrude_temp is defined %}
      {% set min_temp = printer.configfile.settings.extruder.min_extrude_temp|int %}
  {% else %}
      {% set min_temp = 170 %}
  {% endif %}
  {% set min_temp = min_temp +3 %} ; since temp isnt 100% stable, if it goes down by 0.1 degree the firmware will set .can_extrude to false. so set temp a few degrees higher
  {% if params.TARGET_TEMP is defined %} ; If current temp is below target
    {% set TARGET = params.TARGET_TEMP|int %}
    {% if cur_temp|int < TARGET|int %}
      M117 Heating nozzle...
      M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
  {% endif %}
  {% if printer.extruder.can_extrude == False %} ; Verify extruder is hot enough
    RESPOND TYPE=error MSG="Below minimum temp. Heating extruder..."
    M109 S{min_temp|int} ; Heat up to min_extrude_temp
  {% endif %}
  M117  RETRACTING FILAMENT...
  G91 ; Relative positioning
  G1 E-10 F250 ; purge to change filament
  G4 P900 ; wait a moment
  G1 E-100 F1000 ; unload out the tube
  G90 ; Absolute postitioning
  SET_IDLE_TIMEOUT TIMEOUT=900 ; Return idle timeout to normal
  M117


# 
# # Edit the default() value for FAST
# to the amount of extrusion required to bring the filament to
# just before it starts coming out the hotend (bowden length)
# 
# # Edit the default() value for SLOW
# to the amount of extrusion required after it reaches the hotend (purge amount)
# 
[gcode_macro LOAD_FILAMENT]
gcode:
  {% set SLOW = params.SLOW_LEN|default(60)|float %} ; Purge amount
  {% set FAST = params.FAST_LEN|default(80)|float %} ; Load length
  ##################
  {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
  {% if printer.configfile.settings.extruder.min_extrude_temp is defined %}
      {% set min_temp = printer.configfile.settings.extruder.min_extrude_temp|int %}
  {% else %}
      {% set min_temp = 170 %}
  {% endif %}
  {% set min_temp = min_temp +3 %} ; since temp isnt 100% stable, if it goes down by 0.1 degree the firmware will set .can_extrude to false. so set temp a few degrees higher
  {% if params.TARGET_TEMP is defined %} ; If current temp is below target
    {% set TARGET = params.TARGET_TEMP|int %}
    {% if cur_temp|int < TARGET|int %}
      M117 Heating nozzle...
      M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
  {% endif %}
  {% if printer.extruder.can_extrude == False %} ; Verify extruder is hot enough
    RESPOND TYPE=error MSG="Below minimum temp. Heating extruder..."
    M109 S{min_temp|int} ; Heat up to min_extrude_temp
  {% endif %}
  M117  LOADING...
  G91 ; Relative positioning
  G1 E25.0 F1000 ; pre-load
  G1 E{FAST} F2500 ; load up to hotend
  G4 P900 ; wait a moment
  G1 E{SLOW} F250 ; purge to change filament
  G90 ; Absolute postitioning
  SET_IDLE_TIMEOUT TIMEOUT=900 ; Return idle timeout to normal
  M117


###### PURGE ######
# 
# Edit the default() value for LENGTH
# to the amount of filament you'd like to purge
# 
[gcode_macro PURGE]
gcode:
  {% set LENGTH = params.LENGTH|default(45)|float %} ; Purge length
  ##################
  {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% if printer.configfile.settings.extruder.min_extrude_temp is defined %}
        {% set min_temp = printer.configfile.settings.extruder.min_extrude_temp|int %}
    {% else %}
        {% set min_temp = 170 %}
    {% endif %}
  {% set min_temp = min_temp +3 %} ; since temp isnt 100% stable, if it goes down by 0.1 degree the firmware will set .can_extrude to false. so set temp a few degrees higher
  {% if params.TARGET_TEMP is defined %} ; If current temp is below target
    {% set TARGET = params.TARGET_TEMP|int %}
    {% if cur_temp|int < TARGET|int %}
      M117 Heating nozzle...
      M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
  {% endif %}
  {% if printer.extruder.can_extrude == False %} ; Verify extruder is hot enough
    RESPOND TYPE=error MSG="Below minimum temp. Heating extruder..."
    M109 S{min_temp|int} ; Heat up to min_extrude_temp
  {% endif %}
  M117 PURGING..
  G91 ; Relative positioning
  G1 E{LENGTH} F250 ; Purge 45mm of filament
  G90 ; Absolute postitioning
  M117

[gcode_macro _rafi_macro_complete_bed_leveler]
gcode:
    # Heat Bed to typical printing temp of 60c. 
      #When bedmesh without heat as described in documentation, it seemed to produce inconistent results, but that might have been before i resolved probe issues.
    M190 S60
    # Use absolute coordinates
    G90
    # Home the printer after bed is warm for Z consistency. Not sure if true but I think it helps.
    G28
    # Probe reliability test if need. Tighten/loosen screw to potentially improve range/std_deviation accuracy.
    PROBE_ACCURACY 
    # Probe Calibrate if needed. 
    PROBE_CALIBRATE 
    # Run bed mesh probing
      #not being started for some reason
    BED_MESH_CALIBRATE PROFILE="default"
    RESPOND TYPE=command MSG="Complete. SAVE_CONFIG if desired"

[gcode_macro rafi_macro_bed_mesh]
gcode:
    {% if params.Mesh_Name is defined %} ; If current temp is below target
      {% set MESH_NAME = params.Mesh_Name|string %}
    {% else %}
      {% set MESH_NAME = "default" %}
    {% endif %}
    # Heat Bed to typical printing temp of 60c. 
      #When bedmesh without heat as described in documentation, it seemed to produce inconistent results, but that might have been before i resolved probe issues.
    M190 S60
    # Use absolute coordinates
    G90
    # Home the printer after bed is warm for Z consistency. Not sure if true but I think it helps.
    G28
    # Probe reliability test if need. Tighten/loosen screw to potentially improve range/std_deviation accuracy.
    PROBE_ACCURACY 
    # Run bed mesh probing
    BED_MESH_CALIBRATE PROFILE={MESH_NAME}
    RESPOND TYPE=command MSG="Complete. SAVE_CONFIG if desired"

[gcode_macro rafi_macro_probe_calibrate]
gcode:
    # Heat Bed to typical printing temp of 60c. 
      #When bedmesh without heat as described in documentation, it seemed to produce inconistent results, but that might have been before i resolved probe issues.
    # M190 S60
    # Use absolute coordinates
    G90
    # Home the printer after bed is warm for Z consistency. Not sure if true but I think it helps.
    G28
    # Probe reliability test if need. Tighten/loosen screw to potentially improve range/std_deviation accuracy.
    PROBE_ACCURACY 
    # Probe Calibrate if needed. 
    PROBE_CALIBRATE
    RESPOND TYPE=command MSG="Complete. SAVE_CONFIG if desired"

[gcode_macro bltouch_test_cmds]
gcode:
    BLTOUCH_DEBUG COMMAND=pin_down
    BLTOUCH_DEBUG COMMAND=reset

[gcode_macro probe_test_cmds]
gcode:
    QUERY_PROBE
    PROBE_DOWN
    QUERY_PROBE
    PROBE_UP
    QUERY_PROBE


